using System.IO;
using UnityEngine;
using Zenvin.EditorUtil;

namespace Zenvin.ScriptGeneration {
	/// <summary>
	/// A descendant of <see cref="ScriptFactory"/>, which simplifies setting an output path for the file generated by the factory.
	/// </summary>
	public abstract class DirectedScriptFactory : ScriptFactory {

		private string outputPath = "";

		[PropertyTooltip ("The path of the output file, relative to the Assets folder."), StringPropertyDecorator ("Assets/", null)]
		public string OutputPath { get => outputPath; set => SetOutputPath (value); }


		private void SetOutputPath (string value) {
			// If the method is called during deserialization, just set the value without processing.
			if (!IsDeserialized) {
				outputPath = value;
				return;
			}

			// if the values are already equal, cancel
			if (outputPath == value) {
				return;
			}

			// get fully qualified paths
			var oldPath = GetFullPath (OutputPath);
			var newPath = GetFullPath (value);

			// get file info for paths
			var oldFile = string.IsNullOrEmpty (oldPath) ? null : new FileInfo (oldPath);
			var newFile = string.IsNullOrEmpty (newPath) ? null : new FileInfo (newPath);

			// make sure new file path is valid
			if (newFile == null || newFile.Extension != ".cs") {
				LogError ("New output path is invalid (must be a .cs file name).");
				return;
			}

			// move old file if necessary
			if (oldFile != null && oldFile.Exists) {
				if (newFile.Exists) {
					LogError ($"A file already existed at '{newFile.FullName}'. Output path has not been updated.");
					return;
				}
				oldFile.MoveTo (newFile.FullName);
			}

			// update output path
			outputPath = value;
		}

		protected string GetFullPath (string name) {
			if (string.IsNullOrWhiteSpace (name)) {
				return null;
			}
			return Path.Combine (Application.dataPath, name);
		}

		protected bool ValidateOrCreateOutputPath (out string fullPath, out FileInfo outputFile) {
			fullPath = GetFullPath (OutputPath);
			if (string.IsNullOrEmpty (fullPath)) {
				outputFile = null;
				return false;
			}

			outputFile = new FileInfo (fullPath);
			if (outputFile.Extension == "cs") {
				return false;
			}

			if (!outputFile.Directory.Exists) {
				try {
					outputFile.Directory.Create ();
				} catch {
					return false;
				}
			}
			return true;
		}

	}
}